@startuml UserDeleteBooking
title User/Admin Delete Booking

actor Client
participant "«JavaScript»\nserver" as Server
participant "«router»\nbookings" as BookingsRouter
participant "«controllers»\nbookings" as BookingsController
participant "«model»\nBooking" as BookingModel
database "«MongoDB»\nbookings" as MongoDBBookings

Client -> Server: DELETE /api/v1/bookings/:id
activate Server
Server -> BookingsRouter: route DELETE /bookings/:id
activate BookingsRouter
BookingsRouter -> BookingsController: deleteBooking(req.params, req.user)
activate BookingsController

BookingsController -> BookingModel: Booking.findById(req.params.id)
activate BookingModel
BookingModel -> MongoDBBookings: Query booking by ID
activate MongoDBBookings
MongoDBBookings --> BookingModel: Booking data
deactivate MongoDBBookings
BookingModel --> BookingsController: Booking data
deactivate BookingModel

BookingsController -> BookingsController: Verify booking exists

alt booking.user == req.user.id or req.user.role == "admin"
    BookingsController -> BookingModel: Booking.findByIdAndDelete(req.params.id)
    activate BookingModel
    BookingModel -> MongoDBBookings: Delete booking
    activate MongoDBBookings
    MongoDBBookings --> BookingModel: Deletion confirmation
    deactivate MongoDBBookings
    BookingModel --> BookingsController: Deletion success
    deactivate BookingModel
    BookingsController --> BookingsRouter: response (success: booking deleted)
else
    BookingsController --> BookingsRouter: response (error: unauthorized)
end
deactivate BookingsController

BookingsRouter --> Server: response
deactivate BookingsRouter
Server --> Client: response (success or error)
deactivate Server

@enduml